(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser'), require('@angular/common'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/platform-browser', '@angular/common', '@angular/forms'], factory) :
    (factory((global.ng = global.ng || {}, global.ng.dynamicAutocompleteSearchField = {}),global.ng.core,global.platformBrowser,global.common,global.forms));
}(this, (function (exports,core,platformBrowser,common,forms) { 'use strict';

    var SearchboxComponent = /** @class */ (function () {
        function SearchboxComponent() {
            this.changeEvent = new core.EventEmitter();
            this.placeholder = 'Search';
            this.noRecord = 'No Data Found';
            this.status = true;
        }
        SearchboxComponent.prototype.ngOnInit = function () {
            if (this.options.searchData.ishighlight) {
                this.highlightColour = 'yellow';
                if (this.options.searchData.highlightColour) {
                    this.highlightColour = this.options.searchData.highlightColour;
                }
            }
            var defautSearchBy = [];
            for (var _i = 0, _a = this.options.data; _i < _a.length; _i++) {
                var obj = _a[_i];
                Object.keys(obj).forEach(function (data) {
                    if (defautSearchBy.indexOf(data) === -1) {
                        defautSearchBy.push(data);
                    }
                });
            }
            this.searchBy = defautSearchBy;
            this.displayBy = defautSearchBy;
            if (this.options.searchData.placeHolder) {
                this.placeholder = this.options.searchData.placeHolder;
            }
            if (this.options.searchData.noRecord) {
                this.noRecord = this.options.searchData.noRecord;
            }
            if (this.options.searchData.searchBy) {
                if (this.options.searchData.searchBy.length > 0) {
                    this.searchBy = this.options.searchData.searchBy;
                }
            }
            if (this.options.searchData.displayBy) {
                if (this.options.searchData.displayBy.length > 0) {
                    this.displayBy = this.options.searchData.displayBy;
                }
            }
        };
        SearchboxComponent.prototype.searchRowValue = function (value) {
            var selectedValue = [];
            this.options.searchData.displayBy.forEach(function (key) {
                selectedValue.push(value[key]);
            });
            this.status = !this.status;
            this.searchText = selectedValue.join(' ');
            this.searchTextValue = null;
            this.changeEvent.emit(value);
        };
        SearchboxComponent.prototype.onchange = function () {
            this.searchTextValue = this.searchText;
        };
        SearchboxComponent.prototype.receiveRowValue = function (event) {
            this.searchTextValue = null;
        };
        SearchboxComponent.prototype.checkNoRecord = function (data) {
            if (data.length === 0) {
                return true;
            }
        };
        SearchboxComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-searchbox',
                        templateUrl: './searchbox.component.html',
                        styleUrls: ['./searchbox.component.css'],
                    },] },
        ];
        /** @nocollapse */
        SearchboxComponent.ctorParameters = function () { return []; };
        SearchboxComponent.propDecorators = {
            options: [{ type: core.Input }],
            changeEvent: [{ type: core.Output }]
        };
        return SearchboxComponent;
    }());

    var SearchPipe = /** @class */ (function () {
        function SearchPipe() {
        }
        SearchPipe.prototype.transform = function (value, keys, term) {
            if (!term) {
                return value;
            }
            return (value || []).filter(function (item) { return keys.some(function (key) { return item.hasOwnProperty(key) && new RegExp(term, 'gi').test(item[key]); }); });
        };
        SearchPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'searchFilter'
                    },] },
        ];
        return SearchPipe;
    }());

    var HighlightSearch = /** @class */ (function () {
        function HighlightSearch(_sanitizer) {
            this._sanitizer = _sanitizer;
        }
        HighlightSearch.prototype.transform = function (value, args, getColour) {
            var re = new RegExp(args, 'gi');
            var string = value.toString().replace(re, "<span style = \"background-color:" + getColour + "\">" + args + "</span>");
            return this._sanitizer.bypassSecurityTrustHtml(string);
        };
        HighlightSearch.decorators = [
            { type: core.Pipe, args: [{
                        name: 'highlight',
                    },] },
        ];
        /** @nocollapse */
        HighlightSearch.ctorParameters = function () { return [
            { type: platformBrowser.DomSanitizer }
        ]; };
        return HighlightSearch;
    }());

    var ClickOutsideDirective = /** @class */ (function () {
        function ClickOutsideDirective(_elementRef) {
            this._elementRef = _elementRef;
            this.clickOutside = new core.EventEmitter();
        }
        ClickOutsideDirective.prototype.onClick = function (targetElement) {
            var clickedInside = this._elementRef.nativeElement.contains(targetElement);
            if (!clickedInside) {
                this.clickOutside.emit(1);
            }
        };
        ClickOutsideDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: '[clickOutside]'
                    },] },
        ];
        /** @nocollapse */
        ClickOutsideDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        ClickOutsideDirective.propDecorators = {
            clickOutside: [{ type: core.Output }],
            onClick: [{ type: core.HostListener, args: ['document:click', ['$event.target'],] }]
        };
        return ClickOutsideDirective;
    }());

    var AutocompleteSearchModule = /** @class */ (function () {
        function AutocompleteSearchModule() {
        }
        AutocompleteSearchModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                        ],
                        declarations: [SearchboxComponent,
                            SearchPipe,
                            HighlightSearch,
                            ClickOutsideDirective
                        ],
                        exports: [
                            SearchboxComponent, SearchPipe, HighlightSearch, ClickOutsideDirective
                        ]
                    },] },
        ];
        return AutocompleteSearchModule;
    }());

    exports.AutocompleteSearchModule = AutocompleteSearchModule;
    exports.SearchboxComponent = SearchboxComponent;
    exports.SearchPipe = SearchPipe;
    exports.HighlightSearch = HighlightSearch;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
