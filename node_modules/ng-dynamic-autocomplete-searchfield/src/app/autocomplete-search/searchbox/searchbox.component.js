import { Component, Output, EventEmitter, Input } from '@angular/core';
var SearchboxComponent = /** @class */ (function () {
    function SearchboxComponent() {
        this.changeEvent = new EventEmitter();
        this.placeholder = 'Search';
        this.noRecord = 'No Data Found';
        this.status = true;
    }
    SearchboxComponent.prototype.ngOnInit = function () {
        if (this.options.searchData.ishighlight) {
            this.highlightColour = 'yellow';
            if (this.options.searchData.highlightColour) {
                this.highlightColour = this.options.searchData.highlightColour;
            }
        }
        var defautSearchBy = [];
        for (var _i = 0, _a = this.options.data; _i < _a.length; _i++) {
            var obj = _a[_i];
            Object.keys(obj).forEach(function (data) {
                if (defautSearchBy.indexOf(data) === -1) {
                    defautSearchBy.push(data);
                }
            });
        }
        this.searchBy = defautSearchBy;
        this.displayBy = defautSearchBy;
        if (this.options.searchData.placeHolder) {
            this.placeholder = this.options.searchData.placeHolder;
        }
        if (this.options.searchData.noRecord) {
            this.noRecord = this.options.searchData.noRecord;
        }
        if (this.options.searchData.searchBy) {
            if (this.options.searchData.searchBy.length > 0) {
                this.searchBy = this.options.searchData.searchBy;
            }
        }
        if (this.options.searchData.displayBy) {
            if (this.options.searchData.displayBy.length > 0) {
                this.displayBy = this.options.searchData.displayBy;
            }
        }
    };
    SearchboxComponent.prototype.searchRowValue = function (value) {
        var selectedValue = [];
        this.options.searchData.displayBy.forEach(function (key) {
            selectedValue.push(value[key]);
        });
        this.status = !this.status;
        this.searchText = selectedValue.join(' ');
        this.searchTextValue = null;
        this.changeEvent.emit(value);
    };
    SearchboxComponent.prototype.onchange = function () {
        this.searchTextValue = this.searchText;
    };
    SearchboxComponent.prototype.receiveRowValue = function (event) {
        this.searchTextValue = null;
    };
    SearchboxComponent.prototype.checkNoRecord = function (data) {
        if (data.length === 0) {
            return true;
        }
    };
    SearchboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-dynamic-autocompleteField',
                    template: `
                    <form>
        <input  clickOutside  type="text" [(ngModel)]='searchText'  (keyup) ='onchange()' (clickOutside)="receiveRowValue($event)" placeholder="{{this.placeholder}}" name="focus" required class="search-box" placeholder="Enter search term" />
         <button  class="close-icon"  type="reset"></button>
         <table>
            <span *ngIf='searchTextValue'>
              <tr *ngFor='let value of options.data|searchFilter:searchBy:searchTextValue' (click)='searchRowValue(value)'>
                <td *ngFor='let n of displayBy'>
                  <span [innerHTML]="value[n] | highlight:searchTextValue:highlightColour"></span>
                </td>
              </tr>
              <tr>
                <td *ngIf="checkNoRecord(options.data|searchFilter:searchBy:searchTextValue)" >
                   {{noRecord}}
                </td>
              </tr>
            </span>
          </table>
        </form>
`,
                    styles: [`
                    
                    table {
                        position: absolute;
                        z-index: 2;
                        font-family: arial, sans-serif;
                        border-collapse: collapse;
                        width: 100%;
                    }
                    
                    td, th {
                        border: 1px solid #dddddd;
                        text-align: left;
                        padding: 8px;
                    }
                    
                    tr {
                        background-color: #dddddd;
                    }
                    
                    
                    
                    
                    
                    
                    h1 {
                        color: green;
                        text-align: center;
                    }
                    .redfamily {
                        color: red;	
                    }
                    .search-box,.close-icon,.search-wrapper {
                        position: relative;
                        padding: 10px;
                    }
                    .search-wrapper {
                        width: 500px;
                        margin: auto;
                        margin-top: 50px;
                    }
                    .search-box {
                        width: 30%;
                        border: 1px solid #ccc;
                        height: 35px;
                      
                    }
                
                
                    .close-icon {
                        border:1px solid transparent;
                        background-color: transparent;
                        display: inline-block;
                        vertical-align: middle;
                       outline: 0;
                       cursor: pointer;
                    }
                    .close-icon:after {
                        content: "X";
                        display: block;
                        width: 15px;
                        height: 15px;
                        position: absolute;
                        background-color: #3f51b5;
                        z-index:1;
                        right: 35px;
                        top: 0;
                       
                        border-radius: 50%;
                        text-align: center;
                        color: white;
                        font-weight: normal;
                        font-size: 12px;
                        box-shadow: 0 0 2px #3f51b5;
                        cursor: pointer;
                    }
                    .search-box:not(:valid) ~ .close-icon {
                        display: none;
                    }
                    `],
                },] },
    ];
    /** @nocollapse */
    SearchboxComponent.ctorParameters = function () { return []; };
    SearchboxComponent.propDecorators = {
        options: [{ type: Input }],
        changeEvent: [{ type: Output }]
    };
    return SearchboxComponent;
}());
export { SearchboxComponent };
//# sourceMappingURL=searchbox.component.js.map