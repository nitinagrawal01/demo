(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/forms'], factory) :
    (factory((global.ng = global.ng || {}, global.ng.creatingDynamicTable = {}),global.ng.core,global.common,global.forms));
}(this, (function (exports,core,common,forms) { 'use strict';

    var PagerService = /** @class */ (function () {
        function PagerService() {
        }
        PagerService.prototype.getPager = function (totalItems, currentPage, pageSize) {
            if (currentPage === void 0) { currentPage = 1; }
            var totalPages = Math.ceil(totalItems / pageSize);
            var startPage, endPage;
            if (totalPages <= 5) {
                startPage = 1;
                endPage = totalPages;
            }
            else {
                if (currentPage <= 3) {
                    startPage = 1;
                    endPage = 5;
                }
                else if (currentPage + 1 >= totalPages) {
                    startPage = totalPages - 4;
                    endPage = totalPages;
                }
                else {
                    startPage = currentPage - 2;
                    endPage = currentPage + 2;
                }
            }
            var startIndex = (currentPage - 1) * pageSize;
            var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);
            var p = startPage;
            var pages = [];
            pages.push(p);
            for (var i = 0; i < 4; i++) {
                if (Math.max.apply(null, pages) < totalPages) {
                    pages.push(Math.max.apply(null, pages) + 1);
                }
            }
            return {
                totalItems: totalItems,
                currentPage: currentPage,
                pageSize: pageSize,
                totalPages: totalPages,
                startPage: startPage,
                endPage: endPage,
                startIndex: startIndex,
                endIndex: endIndex,
                pages: pages
            };
        };
        return PagerService;
    }());

    var SearchPipe = /** @class */ (function () {
        function SearchPipe() {
        }
        SearchPipe.prototype.transform = function (value, keys, term) {
            if (!term) {
                return value;
            }
            return (value || []).filter(function (item) { return keys.some(function (key) { return item.hasOwnProperty(key) && new RegExp(term, 'gi').test(item[key]); }); });
        };
        SearchPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'searchFilter'
                    },] },
        ];
        return SearchPipe;
    }());

    var SortingPipe = /** @class */ (function () {
        function SortingPipe() {
        }
        SortingPipe.prototype.transform = function (array, prop, args) {
            // console.log(prop);
            array.sort(function (a, b) {
                if (a[prop] < b[prop]) {
                    return -1 * args;
                }
                else if (a[prop] > b[prop]) {
                    return 1 * args;
                }
                else if (a[prop] === undefined) {
                    return -1 * args;
                }
                else {
                    return 0;
                }
            });
            return array;
        };
        SortingPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'sorting'
                    },] },
        ];
        return SortingPipe;
    }());

    var TableComponent = /** @class */ (function () {
        function TableComponent(pagerService) {
            this.pagerService = pagerService;
            this.changeEvent = new core.EventEmitter();
            this.pager = {};
            this.searchTitle = 'search';
            this.noRecord = 'no data found';
            this.status = false;
        }
        TableComponent.prototype.ngOnInit = function () {
            if (this.options.searchData.noRecord) {
                this.noRecord = this.options.searchData.noRecord;
            }
            this.perPageData = this.options.pagination.showEntries[0];
            this.setPage(1);
            if (this.options.searchData.searchTitle) {
                this.searchTitle = this.options.searchData.searchTitle;
            }
            var defautSearchBy = [];
            for (var _i = 0, _a = this.options.tableData; _i < _a.length; _i++) {
                var obj = _a[_i];
                Object.keys(obj).forEach(function (data) {
                    if (defautSearchBy.indexOf(data) === -1) {
                        defautSearchBy.push(data);
                    }
                });
            }
            this.searchBy = defautSearchBy;
            for (var _b = 0, _c = this.options.headerData; _b < _c.length; _b++) {
                var object = _c[_b];
                if (object.defaultSorting && object.isSorting) {
                    this.isSorting(object);
                    return true;
                }
            }
        };
        TableComponent.prototype.setPage = function (page) {
            if (page < 1 || page > this.pager.totalPages) {
                return;
            }
            this.pager = this.pagerService.getPager(this.options.tableData.length, page, this.perPageData);
            if (this.options.pagination.isPagination) {
                this.Items = this.options.tableData.slice(this.pager.startIndex, this.pager.endIndex + 1);
            }
            else {
                this.Items = this.options.tableData;
            }
        };
        TableComponent.prototype.isSorting = function (columnData) {
            if (columnData.isSorting) {
                this.status = !this.status;
                this.sortingDirection = this.status ? 1 : -1;
                this.sortBy = columnData.sortBy;
            }
        };
        TableComponent.prototype.searchItem = function () {
            if (this.options.searchData.searchBy) {
                this.searchBy = this.options.searchData.searchBy;
            }
        };
        TableComponent.prototype.tableRowValue = function (rowValue) {
            this.changeEvent.emit(rowValue);
        };
        TableComponent.prototype.changeEntry = function (event) {
            this.perPageData = parseInt(event.target.value, 0);
            this.setPage(1);
        };
        TableComponent.prototype.checkNoRecord = function (data) {
            if (data.length === 0) {
                return true;
            }
            else {
                return false;
            }
        };
        TableComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-table',
                        templateUrl: './table.component.html',
                        styleUrls: ['./table.component.css']
                    },] },
        ];
        /** @nocollapse */
        TableComponent.ctorParameters = function () { return [
            { type: PagerService }
        ]; };
        TableComponent.propDecorators = {
            options: [{ type: core.Input }],
            changeEvent: [{ type: core.Output }]
        };
        return TableComponent;
    }());

    var DynamicTableModule = /** @class */ (function () {
        function DynamicTableModule() {
        }
        DynamicTableModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                        ],
                        declarations: [
                            TableComponent,
                            SortingPipe,
                            SearchPipe
                        ],
                        providers: [
                            PagerService
                        ],
                        exports: [TableComponent, SortingPipe, SortingPipe, SearchPipe]
                    },] },
        ];
        return DynamicTableModule;
    }());

    exports.DynamicTableModule = DynamicTableModule;
    exports.TableComponent = TableComponent;
    exports.PagerService = PagerService;
    exports.SortingPipe = SortingPipe;
    exports.SearchPipe = SearchPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
