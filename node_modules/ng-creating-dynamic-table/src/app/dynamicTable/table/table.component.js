import { Component, Input, Output, EventEmitter } from '@angular/core';
import { PagerService } from '../paging.service';
var TableComponent = /** @class */ (function () {
    function TableComponent(pagerService) {
        this.pagerService = pagerService;
        this.changeEvent = new EventEmitter();
        this.pager = {};
        this.searchTitle = 'Search';
        this.noRecord = 'No Data Found';
        this.status = false;
    }
    TableComponent.prototype.ngOnInit = function () {
        if (this.options.searchData.noRecord) {
            this.noRecord = this.options.searchData.noRecord;
        }
        this.perPageData = this.options.pagination.showEntries[0];
        this.setPage(1);
        if (this.options.searchData.searchTitle) {
            this.searchTitle = this.options.searchData.searchTitle;
        }
        var defautSearchBy = [];
        for (var _i = 0, _a = this.options.tableData; _i < _a.length; _i++) {
            var obj = _a[_i];
            Object.keys(obj).forEach(function (data) {
                if (defautSearchBy.indexOf(data) === -1) {
                    defautSearchBy.push(data);
                }
            });
        }
        this.searchBy = defautSearchBy;
        for (var _b = 0, _c = this.options.headerData; _b < _c.length; _b++) {
            var object = _c[_b];
            if (object.defaultSorting && object.isSorting) {
                this.isSorting(object);
                return true;
            }
        }
    };
    TableComponent.prototype.setPage = function (page) {
        if (page < 1 || page > this.pager.totalPages) {
            return;
        }
        this.pager = this.pagerService.getPager(this.options.tableData.length, page, this.perPageData);
        if (this.options.pagination.isPagination) {
            this.Items = this.options.tableData.slice(this.pager.startIndex, this.pager.endIndex + 1);
        }
        else {
            this.Items = this.options.tableData;
        }
    };
    TableComponent.prototype.isSorting = function (columnData) {
        if (columnData.isSorting) {
            this.status = !this.status;
            this.sortingDirection = this.status ? 1 : -1;
            this.sortBy = columnData.sortBy;
        }
    };
    TableComponent.prototype.searchItem = function () {
        if (this.options.searchData.searchBy) {
            if (this.options.searchData.searchBy.length > 0) {
                this.searchBy = this.options.searchData.searchBy;
            }
        }
    };
    TableComponent.prototype.tableRowValue = function (rowValue) {
        this.changeEvent.emit(rowValue);
    };
    TableComponent.prototype.changeEntry = function (event) {
        this.perPageData = parseInt(event.target.value, 0);
        this.setPage(1);
    };
    TableComponent.prototype.checkNoRecord = function (data) {
        if (data.length === 0) {
            return true;
        }
        else {
            return false;
        }
    };
    TableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-dynamic-Table',
                    template: `
                    <div class="search" *ngIf='options.searchData.isSearching'>
                    <input [(ngModel)]="serchText" placeholder="{{searchTitle}}" (keyup)='searchItem()'>
                  </div>
                  
                  <table id="customers">
                    <thead>
                      <th *ngFor="let rowvalue of options.headerData" (click)="isSorting(rowvalue)">{{rowvalue.columnName}}
                        <span *ngIf='rowvalue.sortBy==sortBy && status;else temp'>
                          <i class="arrow-up icon"></i>
                        
                        </span>
                        <ng-template #temp> <span *ngIf='rowvalue.sortBy==sortBy'>
                            <i class="arrow-down icon"></i>
                          </span></ng-template>
                      </th>
                    </thead>
                    <tbody>
                      <tr *ngFor="let value of Items|searchFilter:searchBy:serchText|sorting:sortBy:sortingDirection" (click)='tableRowValue(value)'>
                        <td *ngFor="let rowvalue of options.headerData;"> {{value[rowvalue.keyName]}}
                        </td>
                      </tr>
                      <tr>
                        <td *ngIf="checkNoRecord(Items|searchFilter:searchBy:serchText)" colspan="3">
                        {{noRecord}}                        
                        </td>
                      </tr>
                    </tbody>
                    <tfoot *ngIf='options.footerData'>
                      <th *ngFor="let rowvalue of options.headerData">{{rowvalue.columnName}}</th>
                    </tfoot>
                  </table>
                  <div *ngIf='options.pagination.isPagination'>
                    <select (change)="changeEntry($event)">
                      <option *ngFor='let entry of options.pagination.showEntries'>{{entry}}</option>
                    </select>
                    <p  class="showpages">
                      {{pager.startIndex + 1}}-{{pager.endIndex+1}} From Total Entry {{pager.totalItems}}
                    </p>
                    
                    <ul *ngIf="pager.pages && pager.pages.length" class="pagination">
                      <li (click)="setPage(1)" [ngClass]="{disabled:pager.currentPage === 1}">
                        <a>First</a>
                      </li>
                      <li (click)="setPage(pager.currentPage - 1)" [ngClass]="{disabled:pager.currentPage === 1}">
                        <a>Previous</a>
                      </li>
                      <li (click)="setPage(page)" *ngFor="let page of pager.pages" [ngClass]="{active:pager.currentPage === page}">
                        <a>{{page}}</a>
                      </li>
                      <li (click)="setPage(pager.currentPage + 1)" [ngClass]="{disabled:pager.currentPage === pager.totalPages}">
                        <a>Next</a>
                      </li>
                      <li (click)="setPage(pager.totalPages)" [ngClass]="{disabled:pager.currentPage === pager.totalPages}">
                        <a>Last</a>
                      </li>
                    </ul>
                  </div>
                  `,
                    styles: [`
                    p {

                        margin-left: 44px;
                    }
                    select {
                        position:absolute;
                    }
                   
  input {

    padding:3px;
}
table {
    margin-top: 8px;
}
// .showpages{
//     position:absolute;

// }
.pagination {
    display: inline-block;
    list-style: none;
}

.pagination li {
    color: black;
    float: left;
    padding: 8px 16px;
    text-decoration: none;
    transition: background-color .3s;
    border: 1px solid #ddd;
}

.pagination li.disabled {
    opacity: .4;
}
.pagination li.active{
    background-color: #3f51b5;
    color: white;
    border: 1px solid #3f51b5;
}

#customers {
    font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
    border-collapse: collapse;
    width: 100%;
}

#customers td, #customers th {
    border: 1px solid #ddd;
    padding: 8px;
}

#customers tr:nth-child(even){background-color: #f2f2f2;}

#customers tr:hover {background-color: #ddd;}

#customers th {
    padding-top: 10px;
    padding-bottom: 10px;
    text-align: left;
    background-color: #3f51b5;
    color: white;
}

.arrow-down.icon {
    color: white;
    position: absolute;
    margin-left: 15px;
    margin-top: 5px;
    width: 1px;
    height: 14px;
    background-color: currentColor;
  }
  .arrow-down.icon:before {
    content: '';
    position: absolute;
    left: -5px;
    top: 3px;
    width: 10px;
    height: 10px;
    border-top: solid 1px currentColor;
    border-right: solid 1px currentColor;
    -webkit-transform: rotate(135deg);
            transform: rotate(135deg);
  }

  .arrow-up.icon {
    color: white;
    position: absolute;
    margin-left: 15px;
    margin-top: 5px;
    width: 1px;
    height: 14px;
    background-color: currentColor;
  }
  .arrow-up.icon:before {
    content: '';
    position: absolute;
    left: -5px;
    top: 1px;
    width: 10px;
    height: 10px;
    border-top: solid 1px currentColor;
    border-right: solid 1px currentColor;
    -webkit-transform: rotate(-45deg);
            transform: rotate(-45deg);
  }
     
                    `]
                },] },
    ];
    /** @nocollapse */
    TableComponent.ctorParameters = function () { return [
        { type: PagerService }
    ]; };
    TableComponent.propDecorators = {
        options: [{ type: Input }],
        changeEvent: [{ type: Output }]
    };
    return TableComponent;
}());
export { TableComponent };
//# sourceMappingURL=table.component.js.map