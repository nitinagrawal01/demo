import { Component, Input, Output, EventEmitter } from '@angular/core';
var DropdownComponent = /** @class */ (function () {
    function DropdownComponent() {
        this.data = [];
        this.toggle = true;
        this.messageEvent = new EventEmitter();
    }
    DropdownComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.option.array.forEach(function (v) {
            if (v.checked) {
                _this.data.push(v);
            }
        });
    };
    DropdownComponent.prototype.getData = function (event, item) {
        if (event.target.checked) {
            this.data.push(item);
        }
        else {
            if (this.data) {
                this.index = this.data.findIndex(function (x) {
                    return Object.keys(item).every(function (key) {
                        return x[key] === item[key];
                    });
                });
                this.data.splice(this.index, 1);
            }
        }
        this.messageEvent.emit(this.data);
    };
    DropdownComponent.prototype.selectAll = function (getArr) {
        var _this = this;
        getArr.forEach(function (element) {
            if (element.checked === true) {
                return false;
            }
            else {
                element.checked = true;
                _this.data.push(element);
            }
        });
        this.messageEvent.emit(this.data);
    };
    DropdownComponent.prototype.unSelectAll = function (arrData) {
        var _this = this;
        arrData.forEach(function (element) {
            if (element.checked === false) {
                return true;
            }
            else {
                element.checked = false;
                _this.index = _this.data.findIndex(function (x) {
                    return Object.keys(element).every(function (key) {
                        return x[key] === element[key];
                    });
                });
                _this.data.splice(_this.index, 1);
            }
        });
        this.messageEvent.emit(this.data);
    };
    DropdownComponent.prototype.updateSelection = function (position, array, event, item) {
        this.data = [];
        array.forEach(function (x, index) {
            if (position !== index) {
                x.checked = false;
            }
        });
        if (event.target.checked) {
            this.data.push(item);
        }
        this.messageEvent.emit(this.data);
    };
    DropdownComponent.prototype.clear = function () {
        this.searchText = '';
    };
    DropdownComponent.prototype.delete = function (item) {
        this.index = this.data.findIndex(function (x) {
            return Object.keys(item).every(function (key) {
                return x[key] === item[key];
            });
        });
        this.data.splice(this.index, 1);
        var check = this.option.array.forEach(function (element) {
            Object.keys(item).every(function (key) {
                if (element[key] === item[key]) {
                    return element.checked = false;
                }
            });
        });
        this.toggle = true;
    };
    DropdownComponent.prototype.closeDropdown = function (flag) {
        this.toggle = true;
    };
    DropdownComponent.prototype.manageDrop = function (flag) {
        this.toggle = flag;
    };
    DropdownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-multi-select-dropdown',
                    template: `
                    <div [ngClass]="option.addCssClass">
                    <button type="button" class="buttons" id="butt" (click)="toggle = !toggle  " appOutside (closeSection)="manageDrop($event)" >
                      <ng-container *ngIf="data.length > 0; else elseSelect">
                        <ng-container *ngIf="data.length <= option.itemsShowLimit; else numberTemplate">
                        <ng-container  *ngFor="let item of data; let last = last">{{item[option.textKey]}}
                        <ng-container  class="deletes">
                          <span class="changeColor"  (click)="delete(item)">X</span>
                        </ng-container>
                        <ng-container *ngIf="data.length>1 && !last">,&nbsp;</ng-container>
                      </ng-container>
                        </ng-container>
                        <ng-template #numberTemplate>
                          {{data.length}} Selected
                        </ng-template>
                  
                      </ng-container>
                      <ng-template #elseSelect>
                        <ng-container *ngIf="option.texts.selectPlaceHolder; else elsePlace">
                          {{option.texts.selectPlaceHolder}}
                        </ng-container>
                        <ng-template #elsePlace>
                          Select
                        </ng-template>
                      </ng-template>
                    </button>
                    <div class="rows" id="warning-container"    *ngIf="option.array.length > 0">
                      <div class="columns">
                        <div class="cards" [hidden]="toggle" id="do" (appOutside)="closeDropdown($event)">
                          <div class="searchDivs" *ngIf="option.allowSearchFilter == true">
                            <input type="search" class="searchs" placeholder="{{option.texts.searchPlaceHolder}}" [(ngModel)]="searchText">
                          </div>
                  
                          <div class="selectDivs" *ngIf="option.isSelect == true && option.isMultiSelectOrSingleSelect === true && option.disableDropdown == false">
                            <input type="button" class="buttons1" value="{{option.texts.selectAllButtonName}}" (click)="selectAll(option.array)">
                            <input type="button" class="buttons1" value="{{option.texts.unSelectAllButtonName}}" (click)="unSelectAll(option.array)">
                          </div>
                  
                          <ng-container *ngIf="option.isMultiSelectOrSingleSelect === true ; else elseTemplate">
                            <div class="checkBoxDivs" *ngFor="let item of option.array|search:searchText:option">
                  
                              <label class="containers">
                                <input type="checkbox" name="check" [disabled]= option.disableDropdown [(ngModel)]="item.checked" (change)="getData($event, item)"
                                  [value]="item[option.valueKey]">{{item[option.textKey]}}
                                <span class="checkmarks"></span>
                              </label>
                            </div>
                          </ng-container>
                  
                          <ng-template #elseTemplate>
                            <div class="table-divs checkBoxDivs">
                              <table>
                                <tr *ngFor="let entity of option.array | search:searchText:option ; let index = index">
                                  <td>
                                    <label class="containers">
                                      <input type="checkbox" [(ngModel)]="entity.checked" [value]="entity[option.valueKey]" (click)="updateSelection(index, option.array, $event, entity )"
                                      />{{entity[option.textKey]}}
                                      <span class="checkmarks"></span>
                                    </label>
                                  </td>
                                </tr>
                              </table>
                            </div>
                          </ng-template>
                  
                          <ng-container *ngIf="option.texts.closeButtonName; else elseButton">
                            <div class="selectDivs close" (click)="clear($event)">
                              <button class="buttons selectDivs" (click)="toggle = !toggle">{{option.texts.closeButtonName}} </button>
                            </div>
                          </ng-container>
                  
                          <ng-template #elseButton>
                            <div class="selectDivs close" (click)="clear($event)">
                              <button type="button" class="buttons selectDivs" (click)="toggle = !toggle">close </button>
                            </div>
                          </ng-template>
                        </div>
                      </div>
                    </div>
                  </div>
                  `
                  ,
                    styles: [`/* The container */
                    .containers {
                        transition: none;
                        display: block;
                        position: relative;
                        padding-left: 25px;
                        margin-bottom: 1px;
                        cursor: pointer;
                        font-size: 18px;
                    }
                    .changeColor {
                        color: rgb(213, 91, 91);
                    }
                    /* Hide the browser's default checkbox */
                    .containers input {
                        position: absolute;
                        opacity: 0;
                        cursor: pointer;
                    }
                    
                    /* Create a custom checkbox */
                    .checkmarks {
                        position: absolute;
                        top: 7px;
                        left: 0;
                        height: 16px;
                        width: 16px;
                        background-color: #eee;
                    }
                    
                    /* On mouse-over, add a grey background color */
                    .containers:hover input ~ .checkmarks {
                        background-color: #ccc;
                    }
                    
                    /* When the checkbox is checked, add a blue background */
                    .containers input:checked ~ .checkmarks {
                        background-color:#3f51b5;
                    }
                    
                    /* Create the checkmark/indicator (hidden when not checked) */
                    .checkmarks:after {
                        content: "";
                        position: absolute;
                        display: none;
                    }
                    
                    /* Show the checkmark when checked */
                    .containers input:checked ~ .checkmarks:after {
                        display: block;
                    }
                    
                    /* Style the checkmark/indicator */
                    .containers .checkmarks:after {
                        left: 6px;
                        top: 1px;
                        width: 7px;
                        height: 12px;
                        border: solid white;
                        border-width: 0 3px 3px 0;
                        -webkit-transform: rotate(45deg);
                        -ms-transform: rotate(45deg);
                        transform: rotate(45deg);
                    }
                    
                    * {
                      box-sizing: border-box;
                    }
                    
                    
                    
                    /* Float four columns side by side */
                    .columns {
                        float: auto;
                        width: 18%;
                        padding: 0 5px;
                    }
                    
                    .rows {margin: 0 -5px;}
                    
                    /* Clear floats after the columns */
                    .rows:after {
                      content: "";
                      display: table;
                      clear: both;
                    }
                    
                    /* Responsive columns */
                    @media screen and (max-width: 600px) {
                      .columns {
                        width: 100%;
                        display: block;
                        margin-bottom: 10px;
                      }
                    }
                    
                    /* Style the counter cards */
                    .cards {
                        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
                        padding: 0 0 0 0;
                        background-color: white;
                        border: 1px solid #ddd;
                        cursor:pointer;
                        width:175px;
                        height:auto;
                        position: absolute;
                        z-index: 2;
                    }
                    .buttons {
                        background:#3f51b5;
                        border: none;
                        color: white;
                        padding: 5px 10px;
                        text-align: center;
                        text-decoration: none;
                        display: inline-block;
                        font-size: 15px;
                        cursor: pointer;
                    }
                    
                    .buttons1 {
                        background: #3f51b5;
                        border: 0px;
                        color: white;
                        padding: 7px 4px;
                        text-align: center;
                        text-decoration: none;
                        display: inline-block;
                        font-size: 13px;
                        cursor: pointer;
                        width: 82px;
                        margin: 2px;
                    }
                    
                    .searchs {
                        width: 100%;
                        height: 35px;
                        padding-left: 10px;
                        border: 1px solid #eee;
                    }
                    
                    .searchDivs {
                        width: 100%;
                        margin-bottom: 10px;
                    }
                    
                    .table-divs{
                        margin-left: 10px;
                    }
                    
                    .selectDivs {
                        text-align: center;
                        margin: 10px 0 10px 0px;
                    }
                    
                    .checkBoxDivs {
                        margin-left: 10px;
                        text-align: left;
                    }
                    
                    .selectDivs .buttons{
                        padding: 5px 10px;
                        font-size: 12px;
                        margin-right: 5px;
                        margin-left: 5px;
                    }
                    
                    .selectDivs.close{
                        margin: 0px;
                        float:none;
                      opacity: 1; 
                       
                    }
                    
                    .deletes{
                        
                        background: #FFF;
                        border: 1px solid;
                        border-radius: 20px;
                        display: inline-block;
                        width: 12px;
                        height: 12px;
                        margin-left: 5px;
                    }
                    .deletes span{
                        font-size: 7px;
                        display: block;
                        color: #444;
                            }
                    
                    
                    
                    
                    `]
                },] },
    ];
    /** @nocollapse */
    DropdownComponent.ctorParameters = function () { return []; };
    DropdownComponent.propDecorators = {
        option: [{ type: Input }],
        messageEvent: [{ type: Output }]
    };
    return DropdownComponent;
}());
export { DropdownComponent };
//# sourceMappingURL=dropdown.component.js.map